{"version":3,"sources":["@theme/history.js","@http/path.js","@http/storage.js","@theme/PrivateRoute.jsx","@theme/Theme.jsx","@http/http.auth.service.js","@http/http.service.js","@model/login/saga/login.js","@model/login/actionTypes.js","@model/login/entity.js","@model/login/index.js","@model/user/service.js","@model/user/actionTypes.js","@model/user/saga/create.js","@model/user/reducer.js","@model/user/entity.js","@model/user/index.js","@model/doctor/saga/new.js","@model/doctor/service.js","@model/doctor/actionTypes.js","@model/doctor/saga/create.js","@model/doctor/saga/list.js","@model/doctor/reducer.js","@model/doctor/entity.js","@model/doctor/index.js","@model/customer/saga/new.js","@model/customer/service.js","@model/customer/actionTypes.js","@model/customer/saga/create.js","@model/customer/saga/list.js","@model/customer/reducer.js","@model/customer/entity.js","@model/customer/index.js","@model/appoint/saga/new.js","@model/appoint/service.js","@model/appoint/actionTypes.js","@model/appoint/saga/create.js","@model/appoint/saga/list.js","@model/appoint/reducer.js","@model/appoint/entity.js","@model/appoint/index.js","@model/index.js","@model/login/reducer.js","@model/lang/reducer.js","i18n.js","@model/lang/saga/change.js","@model/lang/actionTypes.js","@model/lang/index.js","@theme/Header.jsx","@theme/Input.jsx","@theme/Select.jsx","pages/Login/Login.jsx","pages/Doctor/DoctorNew.jsx","pages/Doctor/Doctor.jsx","pages/Customer/CustomerNew.jsx","pages/Customer/Customer.jsx","pages/Appoint/AppointNew.jsx","pages/Appoint/Appoint.jsx","App.jsx","store/store.js","index.jsx"],"names":["history","createBrowserHistory","path","base","token","get","localStorage","getItem","storage","data","setItem","removeItem","jwt","err","PrivateRoute","Component","component","rest","render","props","to","pathname","state","from","location","Theme","className","this","children","React","httpAuthService","login","tokenByRefresh","logout","a","email","password","body","client","username","grant_type","req","access_token","push","window","reload","axios","defaults","headers","common","withCredentials","request","url","method","baseURL","timeout","qs","stringify","then","catch","error","console","log","response","status","Promise","reject","text","errorDescription","error_description","httpService","post","put","del","reqOpen","undefined","args","sagaLogin","watchLogin","dominio","action","type","call","newLogin","toast","position","takeLatest","auth","newOid","validation","Yup","shape","required","loginSaga","createUser","payload","sagaCreateUser","watchCreateUser","oid","initialState","loading","user","name","userSaga","sagaNewDoctor","watchNewDoctor","NEW_DOCTOR_SUCCESS","doctor","NEW_DOCTOR","createDoctor","listDoctor","sagaCreateDoctor","watchCreateDoctor","sagaListDoctor","watchListDoctor","list","speciality","min","max","doctorSaga","sagaNewCustomer","watchNewCustomer","NEW_CUSTOMER_SUCCESS","customer","NEW_CUSTOMER","createCustomer","listCustomer","sagaCreateCustomer","watchCreateCustomer","sagaListCustomer","watchListCustomer","customerSaga","sagaNewAppoint","watchNewAppoint","NEW_APPOINT_SUCCESS","appoint","NEW_APPOINT","createAppoint","listAppoint","sagaCreateAppoint","watchCreateAppoint","sagaListAppoint","watchListAppoint","date","appointSaga","rootSaga","all","langSaga","rootReducer","loginReducer","userReducer","langReducer","CHANGE_LANG_SUCCESS","lang","CHANGE_LANG_FAILURE","doctorReducer","customerReducer","appointReducer","resources","en","translations","pt","i18n","use","XHR","LanguageDetector","init","debug","lng","fallbackLng","keySeparator","interpolation","escapeValue","ns","defaultNS","sagaChangeLang","watcChangeLang","changeLanguage","CHANGE_LANG","watchchangeLang","Header","setState","onLogout","t","Button","variant","onClick","changeLang","style","float","Row","Col","md","cursor","Navbar","bg","Brand","as","NavLink","Nav","Link","exportHeader","connect","model","dispatch","connectedHeader","withTranslation","withRouter","Input","Form","Group","col","controlId","Label","label","Control","placeholder","rows","value","values","onChange","handleChange","isValid","getIn","touched","errors","isInvalid","Feedback","tooltip","defaultProps","Select","e","key","map","item","index","id","Login","onLogin","fields","onSave","save","Container","Card","Body","Text","initialValues","validationSchema","onSubmit","formik","exportLogin","connectedLogin","DoctorNew","handleClose","show","handleShow","newForm","reloadPage","Modal","onHide","backdrop","keyboard","closeButton","Title","Footer","exportDoctorNew","connectedDoctorNew","Doctor","componentDidMount","exportDoctor","connectedDoctor","CustomerNew","exportCustomerNew","connectedCustomerNew","Customer","exportCustomer","connectedCustomer","AppointNew","exportAppointNew","connectedAppointNew","Appoint","dateConverted","complete","exportAppoint","connectedAppoint","App","exact","connectedApp","alert","loggerMiddleware","createLogger","sagaMiddleware","createSagaMiddleware","store","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","createStore","combineReducers","run","configureStore","document","getElementById"],"mappings":"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","file":"static/js/main.09a82066.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","\r\nexport const path = {\r\n    base:'https://8080-c1d5a9ca-e0dd-4066-a0f5-0a7af9d9eb31.us-east1.cloudshell.dev',\r\n    token: 'med-token'\r\n};","import jwt from 'jwt-decode';\r\n\r\nimport { path } from '@http/path';\r\n\r\nconst token = path.token;\r\n\r\nconst set = (data) => {\r\n    localStorage.setItem(token, data);\r\n}\r\n\r\nconst remove = () => {\r\n    localStorage.removeItem(token);\r\n}\r\n\r\nconst get = () => {\r\n    return localStorage.getItem(token);\r\n}\r\n\r\nconst content = () => {\r\n    try {\r\n        return jwt(get());\r\n    } catch (err) {\r\n        return { }\r\n    }\r\n}\r\n\r\nexport const storage = {\r\n    set,\r\n    remove,\r\n    get,\r\n    content\r\n}\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nimport { storage } from '@http/storage';\r\n\r\nexport const PrivateRoute = ({ component: Component, ...rest }) => (\r\n    <Route {...rest} render={props => (\r\n        storage.get()\r\n            ? <Component {...props} />\r\n            : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\r\n    )} />\r\n)","import React from \"react\";\nimport { Header } from \"./\";\n\n\nclass Theme extends React.Component {\n\n  render() {\n\n    return (\n      <>\n        <div className=\"wrapper\">\n          {/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */}\n          <Header />\n          {/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */}\n          <div className='content'>\n            {/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */}\n            {this.props.children}\n            {/* %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport { Theme };","import axios from 'axios';\nimport { storage } from './';\nimport { createBrowserHistory } from 'history';\n\nimport qs from 'qs'\n\nexport const httpAuthService = {\n    login,\n    tokenByRefresh,\n    logout,\n};\n\nasync function login(path, {email, password}) {\n\n    const body = {\n        client: 'react-cli',\n        username: email,\n        password: password,\n        grant_type: 'password'\n    }\n\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    var data = await req({path: path, body: body});\n    storage.set(data.access_token);\n    createBrowserHistory().push('/');\n    window.location.reload();\n    return data;\n}\n\nasync function tokenByRefresh(path) {\n    const body = {\n        client: 'react-cli',\n        grant_type: 'refresh_token'\n    }\n\n    var data = await req({path: path, body: body});\n    storage.set(data.access_token);\n    axios.defaults.headers.common['Authorization'] = 'Bearer ' + data.access_token;\n};\n\n\nfunction logout() {\n    // remove user from local storage to log user out\n    storage.remove();\n}\n\n\nasync function req({path, body}) {\n    axios.defaults.withCredentials = true;\n\n    const headers = {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',\n        'Authorization': 'Basic cmVhY3QtY2xpOkBtZWQ=',\n    };\n\n    return await axios.request({\n        withCredentials: true,\n        url: '/oauth/token',\n        method: 'POST',\n        baseURL: path.base,\n        timeout: 10000,\n        headers: headers,\n        data: qs.stringify(body),\n    }).then(({ data }) => {\n        return data;\n    }).catch(error => {\n\n        console.log(error.response)\n        try {\n            if (error.response.status === 401) {\n                logout(path);\n                return Promise.reject({ text: 'Error!', errorDescription: error.response.data.error_description });\n            }\n            if (error.response.status === 400) {\n                return Promise.reject({ text: 'Bad Credentials! Verify the Fields!' });\n            }\n        } catch (err) {\n            // window.location.reload();\n            return Promise.reject({text: 'Service unavailable! Try again...'});\n        }\n\n    })\n};","import axios from 'axios';\n\nimport { httpAuthService } from './http.auth.service';\n\nexport const httpService = {\n    post,\n    put,\n    get,\n    del,\n    req,\n    reqOpen,\n};\n\nasync function post(path, body) {\n    const response = await req({ method: 'post', path: path, data: body });\n    return await response.data;\n}\n\nasync function put(path, body) {\n    const response = await req({ method: 'put', path: path, data: body });\n    return await response.data;\n}\n\n// return body only \nasync function get(path) {\n    const response = await req({ method: 'get', path: path });\n    return await response.data;\n}\n\nasync function del(path) {\n    return await req({ method: 'delete', path: path });\n}\n\n/////////////////////////////////////////////////////////////////////////////////\nasync function reqOpen({ headers, method, path, data }) {\n\n    let url = path.args === undefined ? path.base + path.path : path.base + path.path + path.args;\n    var response = await axios({\n        headers: headers,\n        method: method,\n        url: url,\n        data: data\n    });\n    return response;\n}\nasync function req({ headers, method, path, data }) {\n    await httpAuthService.tokenByRefresh(path);\n\n    let url = path.args === undefined ? path.base + path.path : path.base + path.path + path.args;\n    var response = await axios({\n        headers: headers,\n        method: method,\n        url: url,\n        data: data\n    });\n    return response;\n}\n/////////////////////////////////////////////////////////////////////////////////","import { takeLatest, put, call } from 'redux-saga/effects'\nimport { toast } from 'react-toastify';\n\nimport { httpAuthService } from '@http';\nimport { path } from '@http/path';\n\nimport {\n  LOGIN,\n  LOGIN_PENDING,\n  LOGIN_SUCCESS,\n  LOGIN_FAILURE\n} from '../actionTypes';\n\nconst login = async ({ dominio, email, password }) => {\n  await httpAuthService.login(path, { dominio, email, password });\n}\n\n\nfunction* sagaLogin(action) {\n  yield put({ type: LOGIN_PENDING })\n\n  try {\n\n    const newLogin = yield call(login, action.data);\n\n    yield put({ type: LOGIN_SUCCESS, login: newLogin });\n\n    toast('Welcome!', { type: 'success', position: 'top-right' });\n\n  } catch (error) {\n    yield put({ type: LOGIN_FAILURE });\n\n    toast(error.text, { type: 'error', position: 'top-right' });\n  }\n\n}\n\nexport default function* watchLogin() {\n  yield takeLatest(LOGIN, sagaLogin);\n}\n","\r\nexport const LOGIN = 'LOGIN';\r\nexport const LOGIN_PENDING = 'LOGIN_PENDING';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';","import * as Yup from 'yup';\r\n\r\n\r\nconst newOid = {\r\n    email: '',\r\n    password: '',\r\n};\r\n\r\nconst validation = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email('Invalid Email!')\r\n        .required('This field is required!'),\r\n    password: Yup.string()\r\n        .required('This field is required!'),\r\n});\r\n\r\nexport const auth = {\r\n    newOid,\r\n    validation\r\n}","\r\n\r\nimport watchLogin from './saga/login';\r\n\r\nexport const loginSaga = [\r\n    watchLogin(),\r\n]\r\n\r\nexport * from './actionTypes';\r\nexport * from './reducer';\r\nexport * from './entity';","import { path, httpService } from '@http';\r\nimport qs from 'qs';\r\n\r\n/////////////////////////////////////////////////////////////////////////////////\r\nconst args = { ...path, path: '/user' };\r\n/////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport function createUser(payload) {\r\n\r\n  const headers = { 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8' };\r\n\r\n  return httpService.reqOpen({method: 'post', headers, path: args, data: qs.stringify(payload)});\r\n\r\n}\r\n","export const CREATE_USER = 'CREATE_USER'\r\nexport const CREATE_USER_PENDING = 'CREATE_USER_PENDING'\r\nexport const CREATE_USER_SUCCESS = 'CREATE_USER_SUCCESS'\r\nexport const CREATE_USER_FAILURE = 'CREATE_USER_FAILURE'","import { takeLatest, put, call } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\n\nimport { createUser } from '../service';\nimport {\n  CREATE_USER,\n  CREATE_USER_PENDING,\n  CREATE_USER_SUCCESS,\n  CREATE_USER_FAILURE\n} from '../actionTypes';\n\n\nfunction* sagaCreateUser(action) {\n  yield put({ type: CREATE_USER_PENDING })\n\n  try {\n\n    const newOid = yield call(createUser, action.data);\n\n    yield put({ type: CREATE_USER_SUCCESS, oid: newOid });\n\n    toast('Success!', { type: 'success', position: 'top-right' });\n\n  } catch (error) {\n    yield put({ type: CREATE_USER_FAILURE })\n\n    toast('Error!', { type: 'error', position: 'top-right' });\n  }\n\n}\n\nexport default function* watchCreateUser() {\n  yield takeLatest(CREATE_USER, sagaCreateUser)\n}\n","\nimport {\n  CREATE_USER_PENDING,\n  CREATE_USER_SUCCESS,\n  CREATE_USER_FAILURE,\n} from './actionTypes';\n\n\nconst initialState = { loading: false }\n\n\nfunction userReducer(state = initialState, action) {\n\n  switch (action.type) {\n    case CREATE_USER_PENDING:\n      return {\n        ...state,\n        loading: true,\n      }\n    // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n    case CREATE_USER_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        oid: action.oid\n      }\n    case CREATE_USER_FAILURE:\n      return {\n        ...state,\n        loading: false,\n      }\n    default:\n      return state\n  }\n}\n\nexport { userReducer };","import * as Yup from 'yup';\r\n\r\n\r\nconst newOid = {\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n};\r\n\r\nconst validation = Yup.object().shape({\r\n    name: Yup.string()\r\n        .required('This field is required!'),\r\n    email: Yup.string()\r\n        .email('Invalid Email!')\r\n        .required('This field is required!'),\r\n    password: Yup.string()\r\n        .required('This field is required!'),\r\n});\r\n\r\nexport const user = {\r\n    newOid,\r\n    validation\r\n}","\r\n\r\nimport watchCreateUser from './saga/create';\r\n\r\nexport const userSaga = [\r\n    watchCreateUser(),\r\n]\r\n\r\nexport * from './actionTypes';\r\nexport * from './reducer';\r\nexport * from './service';\r\nexport * from './entity';\r\n","import { takeLatest, put } from 'redux-saga/effects';\r\n\r\nimport {\r\n  doctor,\r\n  NEW_DOCTOR,\r\n  NEW_DOCTOR_SUCCESS,\r\n} from '@model';\r\n\r\nfunction* sagaNewDoctor(action) {\r\n\r\n  yield put({ type: NEW_DOCTOR_SUCCESS, oid: doctor.newOid });\r\n\r\n}\r\n\r\nexport default function* watchNewDoctor() {\r\n  yield takeLatest(NEW_DOCTOR, sagaNewDoctor)\r\n}\r\n","import { path, httpService } from '@http';\r\n\r\n/////////////////////////////////////////////////////////////////////////////////\r\nconst args = { ...path, path: '/doctor' };\r\n/////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport function createDoctor(payload) {\r\n  return httpService.post(args, payload);\r\n}\r\n\r\nexport function listDoctor() {\r\n  return httpService.get(args);\r\n}\r\n","\r\nexport const NEW_DOCTOR = 'NEW_DOCTOR'\r\nexport const NEW_DOCTOR_SUCCESS = 'NEW_DOCTOR_SUCCESS'\r\n\r\nexport const CREATE_DOCTOR = 'CREATE_DOCTOR'\r\nexport const CREATE_DOCTOR_PENDING = 'CREATE_DOCTOR_PENDING'\r\nexport const CREATE_DOCTOR_SUCCESS = 'CREATE_DOCTOR_SUCCESS'\r\nexport const CREATE_DOCTOR_FAILURE = 'CREATE_DOCTOR_FAILURE'\r\n\r\nexport const LIST_DOCTOR = 'LIST_DOCTOR'\r\nexport const LIST_DOCTOR_PENDING = 'LIST_DOCTOR_PENDING'\r\nexport const LIST_DOCTOR_SUCCESS = 'LIST_DOCTOR_SUCCESS'\r\nexport const LIST_DOCTOR_FAILURE = 'LIST_DOCTOR_FAILURE'\r\n","import { takeLatest, put, call } from 'redux-saga/effects';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { createDoctor } from '../service';\r\nimport {\r\n  CREATE_DOCTOR,\r\n  CREATE_DOCTOR_PENDING,\r\n  CREATE_DOCTOR_SUCCESS,\r\n  CREATE_DOCTOR_FAILURE\r\n} from '../actionTypes';\r\n\r\n\r\nfunction* sagaCreateDoctor(action) {\r\n  yield put({ type: CREATE_DOCTOR_PENDING })\r\n\r\n  try {\r\n\r\n    const newOid = yield call(createDoctor, action.data);\r\n\r\n    yield put({ type: CREATE_DOCTOR_SUCCESS, oid: newOid });\r\n\r\n    toast('Success!', { type: 'success', position: 'top-right' });\r\n\r\n  } catch (error) {\r\n    yield put({ type: CREATE_DOCTOR_FAILURE })\r\n\r\n    toast('Error!', { type: 'error', position: 'top-right' });\r\n  }\r\n\r\n}\r\n\r\nexport default function* watchCreateDoctor() {\r\n  yield takeLatest(CREATE_DOCTOR, sagaCreateDoctor)\r\n}\r\n","import { takeLatest, put, call } from 'redux-saga/effects';\r\n\r\nimport { listDoctor } from '../service';\r\nimport {\r\n  LIST_DOCTOR,\r\n  LIST_DOCTOR_PENDING,\r\n  LIST_DOCTOR_SUCCESS,\r\n  LIST_DOCTOR_FAILURE\r\n} from '../actionTypes';\r\n\r\nfunction* sagaListDoctor(action) {\r\n  yield put({ type: LIST_DOCTOR_PENDING })\r\n\r\n  try {\r\n\r\n    const list = yield call(listDoctor)\r\n\r\n    yield put({ type: LIST_DOCTOR_SUCCESS, list: list })\r\n\r\n  } catch (error) {\r\n\r\n    yield put({ type: LIST_DOCTOR_FAILURE })\r\n\r\n  }\r\n}\r\n\r\nexport default function* watchListDoctor() {\r\n  yield takeLatest(LIST_DOCTOR, sagaListDoctor)\r\n}","\r\nimport {\r\n    NEW_DOCTOR_SUCCESS,\r\n    LIST_DOCTOR_PENDING,\r\n    LIST_DOCTOR_SUCCESS,\r\n    LIST_DOCTOR_FAILURE,\r\n    CREATE_DOCTOR_PENDING,\r\n    CREATE_DOCTOR_SUCCESS,\r\n    CREATE_DOCTOR_FAILURE,\r\n} from './actionTypes';\r\n\r\n\r\nconst initialState = { list: null, loading: false }\r\n\r\n\r\nfunction doctorReducer(state = initialState, action) {\r\n\r\n    switch (action.type) {\r\n        case NEW_DOCTOR_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                oid: action.oid\r\n            }\r\n        case LIST_DOCTOR_PENDING:\r\n        case CREATE_DOCTOR_PENDING:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            }\r\n        // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        case LIST_DOCTOR_SUCCESS:\r\n            return {\r\n                ...state,\r\n                list: action.list,\r\n                loading: false\r\n            }\r\n        case LIST_DOCTOR_FAILURE:\r\n            return {\r\n                ...state,\r\n                list: null,\r\n                loading: false\r\n            }\r\n        // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        case CREATE_DOCTOR_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                oid: action.oid\r\n            }\r\n        case CREATE_DOCTOR_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport { doctorReducer };","import * as Yup from 'yup';\r\n\r\n\r\nconst newOid = {\r\n    name: '',\r\n    speciality: '',\r\n};\r\n\r\nconst validation = Yup.object().shape({\r\n    name: Yup.string()\r\n        .min(2, 'This field must have at least 2 characters!')\r\n        .max(100, 'This field may have max 100 characters!')\r\n        .required('This field is required!'),\r\n    speciality: Yup.string()\r\n        .min(2, 'This field must have at least 2 characters!')\r\n        .max(500, 'This field may have max 500 characters!')\r\n        .required('This field is required!')\r\n});\r\n\r\nexport const doctor = {\r\n    newOid,\r\n    validation\r\n}","\r\n\r\n\r\nimport watchNewDoctor from './saga/new';\r\nimport watchCreateDoctor from './saga/create';\r\nimport watchListDoctor from './saga/list';\r\n\r\nexport const doctorSaga = [\r\n    watchNewDoctor(),\r\n    watchCreateDoctor(),\r\n    watchListDoctor(),\r\n]\r\n\r\nexport * from './actionTypes';\r\nexport * from './reducer';\r\nexport * from './service';\r\nexport * from './entity';\r\n","import { takeLatest, put } from 'redux-saga/effects';\r\n\r\nimport {\r\n  customer,\r\n  NEW_CUSTOMER,\r\n  NEW_CUSTOMER_SUCCESS,\r\n} from '@model';\r\n\r\nfunction* sagaNewCustomer(action) {\r\n\r\n  yield put({ type: NEW_CUSTOMER_SUCCESS, oid: customer.newOid });\r\n\r\n}\r\n\r\nexport default function* watchNewCustomer() {\r\n  yield takeLatest(NEW_CUSTOMER, sagaNewCustomer)\r\n}\r\n","import { path, httpService } from '@http';\r\n\r\n/////////////////////////////////////////////////////////////////////////////////\r\nconst args = { ...path, path: '/customer' };\r\n/////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport function createCustomer(payload) {\r\n  return httpService.post(args, payload);\r\n}\r\n\r\nexport function listCustomer() {\r\n  return httpService.get(args);\r\n}\r\n","\r\nexport const NEW_CUSTOMER = 'NEW_CUSTOMER'\r\nexport const NEW_CUSTOMER_SUCCESS = 'NEW_CUSTOMER_SUCCESS'\r\n\r\nexport const CREATE_CUSTOMER = 'CREATE_CUSTOMER'\r\nexport const CREATE_CUSTOMER_PENDING = 'CREATE_CUSTOMER_PENDING'\r\nexport const CREATE_CUSTOMER_SUCCESS = 'CREATE_CUSTOMER_SUCCESS'\r\nexport const CREATE_CUSTOMER_FAILURE = 'CREATE_CUSTOMER_FAILURE'\r\n\r\nexport const LIST_CUSTOMER = 'LIST_CUSTOMER'\r\nexport const LIST_CUSTOMER_PENDING = 'LIST_CUSTOMER_PENDING'\r\nexport const LIST_CUSTOMER_SUCCESS = 'LIST_CUSTOMER_SUCCESS'\r\nexport const LIST_CUSTOMER_FAILURE = 'LIST_CUSTOMER_FAILURE'\r\n","import { takeLatest, put, call } from 'redux-saga/effects';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { createCustomer } from '../service';\r\nimport {\r\n  CREATE_CUSTOMER,\r\n  CREATE_CUSTOMER_PENDING,\r\n  CREATE_CUSTOMER_SUCCESS,\r\n  CREATE_CUSTOMER_FAILURE\r\n} from '../actionTypes';\r\n\r\n\r\nfunction* sagaCreateCustomer(action) {\r\n  yield put({ type: CREATE_CUSTOMER_PENDING })\r\n\r\n  try {\r\n\r\n    const newOid = yield call(createCustomer, action.data);\r\n\r\n    yield put({ type: CREATE_CUSTOMER_SUCCESS, oid: newOid });\r\n\r\n    toast('Success!', { type: 'success', position: 'top-right' });\r\n\r\n  } catch (error) {\r\n    yield put({ type: CREATE_CUSTOMER_FAILURE })\r\n\r\n    toast('Error!', { type: 'error', position: 'top-right' });\r\n  }\r\n\r\n}\r\n\r\nexport default function* watchCreateCustomer() {\r\n  yield takeLatest(CREATE_CUSTOMER, sagaCreateCustomer)\r\n}\r\n","import { takeLatest, put, call } from 'redux-saga/effects';\r\n\r\nimport { listCustomer } from '../service';\r\nimport {\r\n  LIST_CUSTOMER,\r\n  LIST_CUSTOMER_PENDING,\r\n  LIST_CUSTOMER_SUCCESS,\r\n  LIST_CUSTOMER_FAILURE\r\n} from '../actionTypes';\r\n\r\nfunction* sagaListCustomer(action) {\r\n  yield put({ type: LIST_CUSTOMER_PENDING })\r\n\r\n  try {\r\n\r\n    const list = yield call(listCustomer)\r\n\r\n    yield put({ type: LIST_CUSTOMER_SUCCESS, list: list })\r\n\r\n  } catch (error) {\r\n\r\n    yield put({ type: LIST_CUSTOMER_FAILURE })\r\n\r\n  }\r\n}\r\n\r\nexport default function* watchListCustomer() {\r\n  yield takeLatest(LIST_CUSTOMER, sagaListCustomer)\r\n}","\r\nimport {\r\n    NEW_CUSTOMER_SUCCESS,\r\n    LIST_CUSTOMER_PENDING,\r\n    LIST_CUSTOMER_SUCCESS,\r\n    LIST_CUSTOMER_FAILURE,\r\n    CREATE_CUSTOMER_PENDING,\r\n    CREATE_CUSTOMER_SUCCESS,\r\n    CREATE_CUSTOMER_FAILURE,\r\n} from './actionTypes';\r\n\r\n\r\nconst initialState = { list: null, loading: false }\r\n\r\n\r\nfunction customerReducer(state = initialState, action) {\r\n\r\n    switch (action.type) {\r\n        case NEW_CUSTOMER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                oid: action.oid\r\n            }\r\n        case LIST_CUSTOMER_PENDING:\r\n        case CREATE_CUSTOMER_PENDING:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            }\r\n        // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        case LIST_CUSTOMER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                list: action.list,\r\n                loading: false\r\n            }\r\n        case LIST_CUSTOMER_FAILURE:\r\n            return {\r\n                ...state,\r\n                list: null,\r\n                loading: false\r\n            }\r\n        // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        case CREATE_CUSTOMER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                oid: action.oid\r\n            }\r\n        case CREATE_CUSTOMER_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport { customerReducer };","import * as Yup from 'yup';\r\n\r\n\r\nconst newOid = {\r\n    name: '',\r\n};\r\n\r\nconst validation = Yup.object().shape({\r\n    name: Yup.string()\r\n        .min(2, 'This field must have at least 2 characters!')\r\n        .max(100, 'This field may have max 100 characters!')\r\n        .required('This field is required!')\r\n});\r\n\r\nexport const customer = {\r\n    newOid,\r\n    validation\r\n}","\r\n\r\n\r\nimport watchNewCustomer from './saga/new';\r\nimport watchCreateCustomer from './saga/create';\r\nimport watchListCustomer from './saga/list';\r\n\r\nexport const customerSaga = [\r\n    watchNewCustomer(),\r\n    watchCreateCustomer(),\r\n    watchListCustomer(),\r\n]\r\n\r\nexport * from './actionTypes';\r\nexport * from './reducer';\r\nexport * from './service';\r\nexport * from './entity';\r\n","import { takeLatest, put } from 'redux-saga/effects';\r\n\r\nimport {\r\n  appoint,\r\n  NEW_APPOINT,\r\n  NEW_APPOINT_SUCCESS,\r\n} from '@model';\r\n\r\nfunction* sagaNewAppoint(action) {\r\n\r\n  yield put({ type: NEW_APPOINT_SUCCESS, oid: appoint.newOid });\r\n\r\n}\r\n\r\nexport default function* watchNewAppoint() {\r\n  yield takeLatest(NEW_APPOINT, sagaNewAppoint)\r\n}\r\n","import { path, httpService } from '@http';\r\n\r\n/////////////////////////////////////////////////////////////////////////////////\r\nconst args = { ...path, path: '/appointment' };\r\n/////////////////////////////////////////////////////////////////////////////////\r\n\r\nexport function createAppoint(payload) {\r\n  return httpService.post(args, payload);\r\n}\r\n\r\nexport function listAppoint() {\r\n  return httpService.get(args);\r\n}\r\n","\r\nexport const NEW_APPOINT = 'NEW_APPOINT'\r\nexport const NEW_APPOINT_SUCCESS = 'NEW_APPOINT_SUCCESS'\r\n\r\nexport const CREATE_APPOINT = 'CREATE_APPOINT'\r\nexport const CREATE_APPOINT_PENDING = 'CREATE_APPOINT_PENDING'\r\nexport const CREATE_APPOINT_SUCCESS = 'CREATE_APPOINT_SUCCESS'\r\nexport const CREATE_APPOINT_FAILURE = 'CREATE_APPOINT_FAILURE'\r\n\r\nexport const LIST_APPOINT = 'LIST_APPOINT'\r\nexport const LIST_APPOINT_PENDING = 'LIST_APPOINT_PENDING'\r\nexport const LIST_APPOINT_SUCCESS = 'LIST_APPOINT_SUCCESS'\r\nexport const LIST_APPOINT_FAILURE = 'LIST_APPOINT_FAILURE'\r\n","import { takeLatest, put, call } from 'redux-saga/effects';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { createAppoint } from '../service';\r\nimport {\r\n  CREATE_APPOINT,\r\n  CREATE_APPOINT_PENDING,\r\n  CREATE_APPOINT_SUCCESS,\r\n  CREATE_APPOINT_FAILURE\r\n} from '../actionTypes';\r\n\r\n\r\nfunction* sagaCreateAppoint(action) {\r\n  yield put({ type: CREATE_APPOINT_PENDING })\r\n\r\n  try {\r\n\r\n    const newOid = yield call(createAppoint, action.data);\r\n\r\n    yield put({ type: CREATE_APPOINT_SUCCESS, oid: newOid });\r\n\r\n    toast('Success!', { type: 'success', position: 'top-right' });\r\n\r\n  } catch (error) {\r\n    yield put({ type: CREATE_APPOINT_FAILURE })\r\n\r\n    toast('Error!', { type: 'error', position: 'top-right' });\r\n  }\r\n\r\n}\r\n\r\nexport default function* watchCreateAppoint() {\r\n  yield takeLatest(CREATE_APPOINT, sagaCreateAppoint)\r\n}\r\n","import { takeLatest, put, call } from 'redux-saga/effects';\r\n\r\nimport { listAppoint } from '../service';\r\nimport {\r\n  LIST_APPOINT,\r\n  LIST_APPOINT_PENDING,\r\n  LIST_APPOINT_SUCCESS,\r\n  LIST_APPOINT_FAILURE\r\n} from '../actionTypes';\r\n\r\nfunction* sagaListAppoint(action) {\r\n  yield put({ type: LIST_APPOINT_PENDING })\r\n\r\n  try {\r\n\r\n    const list = yield call(listAppoint)\r\n\r\n    yield put({ type: LIST_APPOINT_SUCCESS, list: list })\r\n\r\n  } catch (error) {\r\n\r\n    yield put({ type: LIST_APPOINT_FAILURE })\r\n\r\n  }\r\n}\r\n\r\nexport default function* watchListAppoint() {\r\n  yield takeLatest(LIST_APPOINT, sagaListAppoint)\r\n}","\r\nimport {\r\n    NEW_APPOINT_SUCCESS,\r\n    LIST_APPOINT_PENDING,\r\n    LIST_APPOINT_SUCCESS,\r\n    LIST_APPOINT_FAILURE,\r\n    CREATE_APPOINT_PENDING,\r\n    CREATE_APPOINT_SUCCESS,\r\n    CREATE_APPOINT_FAILURE,\r\n} from './actionTypes';\r\n\r\n\r\nconst initialState = { list: null, loading: false }\r\n\r\n\r\nfunction appointReducer(state = initialState, action) {\r\n\r\n    switch (action.type) {\r\n        case NEW_APPOINT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                oid: action.oid\r\n            }\r\n        case LIST_APPOINT_PENDING:\r\n        case CREATE_APPOINT_PENDING:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            }\r\n        // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        case LIST_APPOINT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                list: action.list,\r\n                loading: false\r\n            }\r\n        case LIST_APPOINT_FAILURE:\r\n            return {\r\n                ...state,\r\n                list: null,\r\n                loading: false\r\n            }\r\n        // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\r\n        case CREATE_APPOINT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                oid: action.oid\r\n            }\r\n        case CREATE_APPOINT_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport { appointReducer };","import * as Yup from 'yup';\r\n\r\n\r\nconst newOid = {\r\n    date: '',\r\n    doctor: null,\r\n    customer: null,\r\n};\r\n\r\nconst validation = Yup.object().shape({\r\n    date: Yup.string()\r\n        .min(2, 'This field must have at least 2 characters!')\r\n        .max(100, 'This field may have max 100 characters!')\r\n        .required('This field is required!'),\r\n    doctor: Yup.number()\r\n        .required('This field is required!'),\r\n    customer: Yup.number()\r\n        .required('This field is required!'),\r\n});\r\n\r\nexport const appoint = {\r\n    newOid,\r\n    validation\r\n}","\r\n\r\n\r\nimport watchNewAppoint from './saga/new';\r\nimport watchCreateAppoint from './saga/create';\r\nimport watchListAppoint from './saga/list';\r\n\r\nexport const appointSaga = [\r\n    watchNewAppoint(),\r\n    watchCreateAppoint(),\r\n    watchListAppoint(),\r\n]\r\n\r\nexport * from './actionTypes';\r\nexport * from './reducer';\r\nexport * from './service';\r\nexport * from './entity';\r\n","import { all } from 'redux-saga/effects';\r\n\r\nimport { loginSaga, loginReducer } from './login';\r\nimport { userSaga, userReducer } from './user';\r\nimport { langSaga, langReducer } from './lang';\r\nimport { doctorSaga, doctorReducer } from './doctor';\r\nimport { customerSaga, customerReducer } from './customer';\r\nimport { appointSaga, appointReducer } from './appoint';\r\n\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    ...loginSaga,\r\n    ...userSaga,\r\n    ...langSaga,\r\n    ...doctorSaga,\r\n    ...customerSaga,\r\n    ...appointSaga,\r\n  ])\r\n}\r\n\r\nexport const rootReducer = {\r\n  loginReducer,\r\n  userReducer,\r\n  langReducer,\r\n  doctorReducer,\r\n  customerReducer,\r\n  appointReducer,\r\n}\r\n\r\nexport * from './login';\r\nexport * from './user';\r\nexport * from './lang';\r\nexport * from './doctor';\r\nexport * from './customer';\r\nexport * from './appoint';\r\n","// @flow\n\nimport { storage } from '@http/storage';\n\nimport {\n  LOGIN_PENDING,\n  LOGIN_SUCCESS,\n  LOGIN_FAILURE\n} from './actionTypes';\n\nfunction loginReducer(state = { loading: false }, action) {\n\n  const user = storage.content().user;\n\n  switch (action.type) {\n    case LOGIN_PENDING:\n      return {\n        ...state,\n        user,\n        loading: true\n      }\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        user,\n        loading: false\n      }\n    case LOGIN_FAILURE:\n      return {\n        ...state,\n        loading: false\n      }\n    default:\n      return { ...state, user }\n  }\n}\n\nexport { loginReducer };\n","\r\nimport {\r\n    CHANGE_LANG_SUCCESS,\r\n    CHANGE_LANG_FAILURE,\r\n} from './actionTypes';\r\n\r\n\r\nconst initialState = { lang: 'en' }\r\n\r\n\r\nfunction langReducer(state = initialState, action) {\r\n\r\n    switch (action.type) {\r\n        case CHANGE_LANG_SUCCESS:\r\n            return {\r\n                lang: action.lang\r\n            }\r\n        case CHANGE_LANG_FAILURE:\r\n            return state;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport { langReducer };","\r\nimport i18n from \"i18next\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\nimport XHR from \"i18next-xhr-backend\";\r\n\r\nimport translation_en from '@locales/en/translation.json';\r\nimport translation_pt from '@locales/pt/translation.json';\r\n\r\n// the translations\r\nconst resources = {\r\n  en: {\r\n    translations: translation_en\r\n  },\r\n  pt: {\r\n    translations: translation_pt\r\n  }\r\n};\r\n\r\ni18n\r\n  .use(XHR)\r\n  .use(LanguageDetector)\r\n  .init({\r\n    debug: true,\r\n    lng: \"en\",\r\n    fallbackLng: \"en\", // use en if detected lng is not available\r\n\r\n    keySeparator: false, // we do not use keys in form messages.welcome\r\n\r\n    interpolation: {\r\n      escapeValue: false // react already safes from xss\r\n    },\r\n\r\n    resources,\r\n\r\n    // have a common namespace used around the full app\r\n    ns: [\"translations\"],\r\n    defaultNS: \"translations\"\r\n  });\r\n\r\nexport default i18n;","import { takeLatest, put } from 'redux-saga/effects';\r\n\r\nimport {\r\n  CHANGE_LANG,\r\n  CHANGE_LANG_SUCCESS,\r\n  CHANGE_LANG_FAILURE,\r\n} from '@model';\r\n\r\nimport i18n from '../../../i18n';\r\n\r\nfunction* sagaChangeLang(action) {\r\n\r\n  try {\r\n    i18n.changeLanguage(action.lang)\r\n    yield put({ type: CHANGE_LANG_SUCCESS, lang: action.lang });\r\n  } catch (err) {\r\n    yield put({ type: CHANGE_LANG_FAILURE });\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default function* watcChangeLang() {\r\n  yield takeLatest(CHANGE_LANG, sagaChangeLang)\r\n}\r\n","\r\nexport const CHANGE_LANG = 'CHANGE_LANG'\r\nexport const CHANGE_LANG_SUCCESS = 'CHANGE_LANG_SUCCESS'\r\nexport const CHANGE_LANG_FAILURE = 'CHANGE_LANG_FAILURE'\r\n","\r\n\r\n\r\nimport watchchangeLang from './saga/change';\r\nexport const langSaga = [\r\n    watchchangeLang(),\r\n]\r\n\r\nexport * from './actionTypes';\r\nexport * from './reducer';\r\n","import React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport { withRouter, NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport {\n  Row,\n  Col,\n  Button,\n  Nav,\n  Navbar\n} from 'react-bootstrap';\n\nimport { httpAuthService } from '@http';\nimport { history } from '@theme';\n\nimport { CHANGE_LANG } from '@model/lang'\n\nclass Header extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n    }\n  }\n\n  componentDidMount() {\n    this.token();\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////\n  token = () => {\n\n    try {\n      this.setState({\n        user: this.props.loginReducer.user\n      })\n    } catch (err) {\n\n    }\n  }\n  /////////////////////////////////////////////////////////////////////////////////\n\n  /////////////////////////////////////////////////////////////////////////////////\n  onLogout = async (logout) => {\n    await logout();\n    await history.push('/');\n    this.setState({\n      user: null\n    })\n  }\n  /////////////////////////////////////////////////////////////////////////////////\n\n  /////////////////////////////////////////////////////////////////////////////////\n  render() {\n    const { t } = this.props;\n\n    const { logout } = this.props;\n\n    return (\n      <>\n        <div className='header'>\n          <div>\n            <Button variant='outline-primary' className='fas fa-language' onClick={() => this.props.changeLang('en')}> En\n            </Button>\n\n            <Button variant='outline-secondary' className='fas fa-language' onClick={() => this.props.changeLang('pt')}> Pt\n            </Button>\n\n          </div>\n          <div style={{ float: 'right' }}>\n            {this.state.user &&\n              <Row>\n                <Col md='auto'>\n                  <i>{t('def_hello') + this.state.user.name}</i>\n                  <p onClick={() => this.onLogout(logout)}\n                    style={{ cursor: 'pointer' }} >\n                    {t('def_signout')}\n                  </p>\n                </Col>\n              </Row>\n            }\n          </div>\n        </div>\n        {this.state.user &&\n          <Col md='12'>\n            <Navbar bg='dark' variant='dark'>\n              <Navbar.Brand as={NavLink} to='/'>Med</Navbar.Brand>\n              <Nav className='mr-auto'>\n                <Nav.Link as={NavLink} to='/'>Home</Nav.Link>\n                <Nav.Link as={NavLink} to='/doctor'>{t('doctor_page_title')}</Nav.Link>\n                <Nav.Link as={NavLink} to='/customer'>{t('customer_page_title')}</Nav.Link>\n              </Nav>\n            </Navbar>\n          </Col>\n        }\n      </>\n    );\n  }\n}\n\n/////////////////////////////////////////////////////////////////////////////////\nexport function mapStateToProps(state) {\n  const { loginReducer } = state.model;\n  return { loginReducer };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    logout: httpAuthService.logout,\n    changeLang: (lang) => dispatch({ type: CHANGE_LANG, lang })\n  }\n};\n/////////////////////////////////////////////////////////////////////////////////\n\nconst connectedHeader = connect(mapStateToProps, mapDispatchToProps);\nlet exportHeader = (connectedHeader)(Header);\nexportHeader = withTranslation()(exportHeader);\nexportHeader = withRouter(exportHeader);\nexport { exportHeader as Header };","import React from 'react';\r\n\r\nimport {\r\n    Form,\r\n    Col\r\n} from 'react-bootstrap';\r\n\r\nimport { getIn } from 'formik';\r\n\r\nexport const Input = (props) => {\r\n\r\n    return (\r\n\r\n        <Form.Group as={Col} md={props.col} controlId={'id_' + props.name}>\r\n            <Form.Label>{props.label}</Form.Label>\r\n            <Form.Control\r\n                as={props.as}\r\n                type={props.type}\r\n                name={props.name}\r\n                placeholder={props.placeholder}\r\n                rows={props.rows}\r\n                value={props.values[props.name]}\r\n                onChange={props.handleChange}\r\n                isValid={getIn(props.touched, props.name) && !getIn(props.errors, props.name)}\r\n                isInvalid={getIn(props.touched, props.name) && getIn(props.errors, props.name)}\r\n            />\r\n            <Form.Control.Feedback type='invalid' tooltip>\r\n                {getIn(props.errors, props.name)}\r\n            </Form.Control.Feedback>\r\n        </Form.Group>\r\n    )\r\n\r\n};\r\n\r\nInput.defaultProps = {\r\n    col: 12,\r\n    type: 'text',\r\n    as: 'input',\r\n};","import React from 'react';\r\n\r\nimport {\r\n    Form,\r\n    Col\r\n} from 'react-bootstrap';\r\n\r\nimport { getIn } from 'formik';\r\n\r\nexport const Select = (props) => {\r\n\r\n    return (\r\n\r\n        <Form.Group as={Col} md={props.col} controlId={'id_' + props.name}>\r\n            <Form.Label>{props.label}</Form.Label>\r\n            <Form.Control\r\n                as='select'\r\n                type={props.type}\r\n                name={props.name}\r\n                placeholder={props.placeholder}\r\n                rows={props.rows}\r\n                onChange={(e) => {\r\n                    props.handleChange(e);\r\n                }}\r\n                isValid={getIn(props.touched, props.name) && !getIn(props.errors, props.name)}\r\n                isInvalid={getIn(props.touched, props.name) && getIn(props.errors, props.name)}\r\n            >\r\n                <option key={-1}>Choose...</option>\r\n                {props.list &&\r\n                    props.list.map((item, index) => <option key={index} value={item.id}>{item.name}</option>)\r\n                }\r\n            </Form.Control>\r\n            <Form.Control.Feedback type='invalid' tooltip>\r\n                {getIn(props.errors, props.name)}\r\n            </Form.Control.Feedback>\r\n        </Form.Group>\r\n    )\r\n\r\n};\r\n\r\nSelect.defaultProps = {\r\n    col: 12,\r\n    type: 'text',\r\n};","import React from 'react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nimport { Row, Col, Button, Container, Card } from 'react-bootstrap';\r\n\r\n\r\nimport { history } from '@theme';\r\nimport { Input } from '@theme';\r\n\r\nimport {\r\n    auth,\r\n    user,\r\n    LOGIN,\r\n    CREATE_USER\r\n} from '@model';\r\n\r\nimport { Formik, Form } from 'formik';\r\n\r\nclass Login extends React.Component {\r\n\r\n    // ///////////////////////////////////////////////////////////////////////////////\r\n    onLogin = async (fields, login) => {\r\n        await login(fields).then(\r\n            history.push('/')\r\n        )\r\n    }\r\n    // ///////////////////////////////////////////////////////////////////////////////\r\n    // ///////////////////////////////////////////////////////////////////////////////\r\n    onSave = async (fields, save, login) => {\r\n        await save(fields).then(\r\n            this.onLogin(fields, login)\r\n        )\r\n    }\r\n    // ///////////////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n\r\n        const { t } = this.props;\r\n        const { login, save } = this.props;\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col md={6}>\r\n                        <Card>\r\n                            <Card.Header>{t('def_signin')}</Card.Header>\r\n                            <Card.Body>\r\n                                <Card.Text>\r\n                                    {t('def_signin_msg')}\r\n                                </Card.Text>\r\n                                <hr />\r\n                                {/* ///////////////////////////////////////////////////////////////////////////////// */}\r\n                                <Formik\r\n                                    initialValues={auth.newOid}\r\n                                    validationSchema={auth.validation}\r\n                                    onSubmit={(values) => this.onLogin(values, login)}\r\n                                >\r\n                                    {(formik) => (\r\n                                        <Form>\r\n                                            {/* // ///////////////////////////////////////////////////////////// */}\r\n                                            <Row>\r\n                                                <Input {...formik}\r\n                                                    label={t('user_email')}\r\n                                                    placeholder={t('user_email')}\r\n                                                    name='email'\r\n                                                />\r\n                                            </Row>\r\n                                            {/* // ///////////////////////////////////////////////////////////// */}\r\n                                            <Row>\r\n                                                <Input {...formik}\r\n                                                    label={t('user_password')}\r\n                                                    placeholder={t('user_password')}\r\n                                                    type='password'\r\n                                                    name='password'\r\n                                                />\r\n                                            </Row>\r\n                                            {/* // ///////////////////////////////////////////////////////////// */}\r\n                                            <Row>\r\n                                                <Col md='auto'>\r\n                                                    <Button variant='outline-primary' type='submit'>{t('def_signin')}</Button>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            {/* // ///////////////////////////////////////////////////////////// */}\r\n                                        </Form>\r\n                                    )}\r\n                                </Formik>\r\n                                {/* ///////////////////////////////////////////////////////////////////////////////// */}\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                    {/* ///////////////////////////////////////////////////////////////////////////////// */}\r\n                    {/* ///////////////////////////////////////////////////////////////////////////////// */}\r\n                    <Col md={6}>\r\n                        <Card>\r\n                            <Card.Header>{t('def_signup')}</Card.Header>\r\n                            <Card.Body>\r\n                                <Card.Text>\r\n                                    {t('def_signup_msg')}\r\n                                </Card.Text>\r\n                                <hr />\r\n                                {/* ///////////////////////////////////////////////////////////////////////////////// */}\r\n                                <Formik\r\n                                    initialValues={user.newOid}\r\n                                    validationSchema={user.validation}\r\n                                    onSubmit={(values) => this.onSave(values, save, login)}\r\n                                >\r\n                                    {(formik) => (\r\n                                        <Form>\r\n                                            {/* // ///////////////////////////////////////////////////////////// */}\r\n                                            <Row>\r\n                                                <Input {...formik}\r\n                                                    label={t('user_name')}\r\n                                                    placeholder={t('user_name')}\r\n                                                    name='name'\r\n                                                />\r\n                                            </Row>\r\n                                            {/* // ///////////////////////////////////////////////////////////// */}\r\n                                            <Row>\r\n                                                <Input {...formik}\r\n                                                    label={t('user_email')}\r\n                                                    placeholder={t('user_email')}\r\n                                                    name='email'\r\n                                                />\r\n                                            </Row>\r\n                                            {/* // ///////////////////////////////////////////////////////////// */}\r\n                                            <Row>\r\n                                                <Input {...formik}\r\n                                                    label={t('user_password')}\r\n                                                    placeholder={t('user_password')}\r\n                                                    type='password'\r\n                                                    name='password'\r\n                                                />\r\n                                            </Row>\r\n                                            {/* // ///////////////////////////////////////////////////////////// */}\r\n                                            <Row>\r\n                                                <Col md='auto'>\r\n                                                    <Button variant='outline-info' type='submit'>{t('def_signup')}</Button>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            {/* // ///////////////////////////////////////////////////////////// */}\r\n                                        </Form>\r\n                                    )}\r\n                                </Formik>\r\n                                {/* ///////////////////////////////////////////////////////////////////////////////// */}\r\n\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container >\r\n        );\r\n    }\r\n}\r\n\r\nexport function mapStateToProps(state) {\r\n    const { loginReducer } = state.model;\r\n    return { loginReducer };\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        login: (data) => dispatch({ type: LOGIN, data }),\r\n        save: (data) => dispatch({ type: CREATE_USER, data }),\r\n    }\r\n}\r\n\r\nconst connectedLogin = connect(mapStateToProps, mapDispatchToProps);\r\nlet exportLogin = (connectedLogin)(Login);\r\nexportLogin = withTranslation()(exportLogin);\r\nexportLogin = withRouter(exportLogin);\r\nexport { exportLogin as Login };","import React from 'react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n    Row,\r\n    Modal,\r\n    Button,\r\n} from 'react-bootstrap';\r\n\r\nimport { Formik, Form } from 'formik';\r\n\r\nimport {\r\n    doctor,\r\n    CREATE_DOCTOR,\r\n    NEW_DOCTOR,\r\n} from '@model';\r\nimport { Input } from '@theme';\r\n\r\nclass DoctorNew extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            show: false,\r\n        }\r\n    }\r\n\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n    handleClose = () => this.setState({ show: false });\r\n    handleShow = () => this.setState({ show: true })\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n    newForm = async () => {\r\n        await this.props.newForm();\r\n        this.handleShow();\r\n    }\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n    onSubmit = async (values) => {\r\n        await this.props.createDoctor(values);\r\n        this.handleClose();\r\n        this.props.reloadPage();\r\n    }\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n\r\n        const { t } = this.props;\r\n        const { initialValues } = this.props;\r\n\r\n        return (\r\n            <>\r\n                <Button variant='outline-primary' className='fas fa-plus'\r\n                    onClick={this.newForm}>\r\n                    {t('def_btn_add')}\r\n                </Button>\r\n\r\n                <Modal\r\n                    show={this.state.show}\r\n                    onHide={this.handleClose}\r\n                    backdrop='static'\r\n                    keyboard={false}\r\n                >\r\n                    <Formik\r\n                        initialValues={initialValues}\r\n                        validationSchema={doctor.validation}\r\n                        onSubmit={(values) => this.onSubmit(values)}\r\n                    >\r\n                        {(formik) => (\r\n                            <Form>\r\n\r\n                                <Modal.Header closeButton>\r\n                                    <Modal.Title><i className='fas fa-plus' />{t('def_modal_new')}</Modal.Title>\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n\r\n\r\n                                    {formik.values &&\r\n                                        <>\r\n                                            {/* // ///////////////////////////////////////////////////////////// */}\r\n                                            <Row>\r\n                                                <Input {...formik}\r\n                                                    label={t('doctor_name')}\r\n                                                    placeholder={t('doctor_name')}\r\n                                                    name='name'\r\n                                                />\r\n                                            </Row>\r\n                                            {/* // ///////////////////////////////////////////////////////////// */}\r\n                                            <Row>\r\n                                                <Input {...formik}\r\n                                                    label={t('doctor_spec')}\r\n                                                    placeholder={t('doctor_spec')}\r\n                                                    name='speciality'\r\n                                                />\r\n                                            </Row>\r\n                                            {/* // ///////////////////////////////////////////////////////////// */}\r\n                                        </>\r\n                                    }\r\n\r\n                                </Modal.Body>\r\n                                <Modal.Footer>\r\n                                    <Button variant='secondary' onClick={this.handleClose}>\r\n                                        {t('def_close')}\r\n                                    </Button>\r\n                                    <Button variant='outline-primary' className='fas fa-check' type='submit' >\r\n                                        {t('def_btn_add')}\r\n                                    </Button>\r\n                                </Modal.Footer>\r\n\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport function mapStateToProps(state) {\r\n    const { doctorReducer } = state.model;\r\n\r\n    return { doctorReducer, initialValues: doctorReducer.oid };\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        newForm: () => dispatch({ type: NEW_DOCTOR }),\r\n        createDoctor: (data) => dispatch({ type: CREATE_DOCTOR, data }),\r\n    }\r\n}\r\n\r\nconst connectedDoctorNew = connect(mapStateToProps, mapDispatchToProps);\r\nlet exportDoctorNew = (connectedDoctorNew)(DoctorNew);\r\nexportDoctorNew = withTranslation()(exportDoctorNew);\r\nexportDoctorNew = withRouter(exportDoctorNew);\r\nexport { exportDoctorNew as DoctorNew };","import React from 'react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n} from 'react-bootstrap';\r\n\r\n\r\nimport {\r\n    LIST_DOCTOR,\r\n} from '@model';\r\n\r\nimport { DoctorNew } from './DoctorNew';\r\n\r\nclass Doctor extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n    async componentDidMount() {\r\n        await this.props.listDoctor();\r\n    }\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n\r\n        const { t } = this.props;\r\n        const { doctorReducer } = this.props;\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col md='12'><h1>{t('doctor_page_title')}</h1></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md='1'>\r\n                        <DoctorNew reloadPage={() => this.componentDidMount()} />\r\n                    </Col>\r\n                </Row>\r\n                <hr />\r\n                <Row>\r\n                    <Col md='12'>\r\n                        {doctorReducer.list && doctorReducer.list.map((doctor) =>\r\n                            <div key={doctor.id}>\r\n                                <Card>\r\n                                    <Card.Header>\r\n                                        {doctor.name}\r\n                                    </Card.Header>\r\n                                    <Card.Body>\r\n                                        <pre>{doctor.speciality}</pre>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                                <hr />\r\n                            </div>\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n            </Container >\r\n        );\r\n    }\r\n}\r\n\r\nexport function mapStateToProps(state) {\r\n    const { doctorReducer } = state.model;\r\n    return { doctorReducer };\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        listDoctor: () => dispatch({ type: LIST_DOCTOR })\r\n    }\r\n}\r\n\r\nconst connectedDoctor = connect(mapStateToProps, mapDispatchToProps);\r\nlet exportDoctor = (connectedDoctor)(Doctor);\r\nexportDoctor = withTranslation()(exportDoctor);\r\nexportDoctor = withRouter(exportDoctor);\r\nexport { exportDoctor as Doctor };","import React from 'react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n    Row,\r\n    Modal,\r\n    Button,\r\n} from 'react-bootstrap';\r\n\r\nimport { Formik, Form } from 'formik';\r\n\r\nimport {\r\n    customer,\r\n    CREATE_CUSTOMER,\r\n    NEW_CUSTOMER,\r\n} from '@model';\r\nimport { Input } from '@theme';\r\n\r\nclass CustomerNew extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            show: false,\r\n        }\r\n    }\r\n\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n    handleClose = () => this.setState({ show: false });\r\n    handleShow = () => this.setState({ show: true })\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n    newForm = async () => {\r\n        await this.props.newForm();\r\n        this.handleShow();\r\n    }\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n    onSubmit = async (values) => {\r\n        await this.props.createCustomer(values);\r\n        this.handleClose();\r\n        this.props.reloadPage();\r\n    }\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n\r\n        const { t } = this.props;\r\n        const { initialValues } = this.props;\r\n\r\n        return (\r\n            <>\r\n                <Button variant='outline-primary' className='fas fa-plus'\r\n                    onClick={this.newForm}>\r\n                    {t('def_btn_add')}\r\n                </Button>\r\n\r\n                <Modal\r\n                    show={this.state.show}\r\n                    onHide={this.handleClose}\r\n                    backdrop='static'\r\n                    keyboard={false}\r\n                >\r\n                    <Formik\r\n                        initialValues={initialValues}\r\n                        validationSchema={customer.validation}\r\n                        onSubmit={(values) => this.onSubmit(values)}\r\n                    >\r\n                        {(formik) => (\r\n                            <Form>\r\n\r\n                                <Modal.Header closeButton>\r\n                                    <Modal.Title><i className='fas fa-plus' />{t('def_modal_new')}</Modal.Title>\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n\r\n\r\n                                    {formik.values &&\r\n                                        <>\r\n                                            {/* // ///////////////////////////////////////////////////////////// */}\r\n                                            <Row>\r\n                                                <Input {...formik}\r\n                                                    label={t('customer_name')}\r\n                                                    placeholder={t('customer_name')}\r\n                                                    name='name'\r\n                                                />\r\n                                            </Row>\r\n                                            {/* // ///////////////////////////////////////////////////////////// */}\r\n                                        </>\r\n                                    }\r\n\r\n                                </Modal.Body>\r\n                                <Modal.Footer>\r\n                                    <Button variant='secondary' onClick={this.handleClose}>\r\n                                        {t('def_close')}\r\n                                    </Button>\r\n                                    <Button variant='outline-primary' className='fas fa-check' type='submit' >\r\n                                        {t('def_btn_add')}\r\n                                    </Button>\r\n                                </Modal.Footer>\r\n\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport function mapStateToProps(state) {\r\n    const { customerReducer } = state.model;\r\n\r\n    return { customerReducer, initialValues: customerReducer.oid };\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        newForm: () => dispatch({ type: NEW_CUSTOMER }),\r\n        createCustomer: (data) => dispatch({ type: CREATE_CUSTOMER, data }),\r\n    }\r\n}\r\n\r\nconst connectedCustomerNew = connect(mapStateToProps, mapDispatchToProps);\r\nlet exportCustomerNew = (connectedCustomerNew)(CustomerNew);\r\nexportCustomerNew = withTranslation()(exportCustomerNew);\r\nexportCustomerNew = withRouter(exportCustomerNew);\r\nexport { exportCustomerNew as CustomerNew };","import React from 'react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n} from 'react-bootstrap';\r\n\r\n\r\nimport {\r\n    LIST_CUSTOMER,\r\n} from '@model';\r\n\r\nimport { CustomerNew } from './CustomerNew';\r\n\r\nclass Customer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n    async componentDidMount() {\r\n        await this.props.listCustomer();\r\n    }\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n\r\n        const { t } = this.props;\r\n        const { customerReducer } = this.props;\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col md='12'><h1>{t('customer_page_title')}</h1></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md='1'>\r\n                        <CustomerNew reloadPage={() => this.componentDidMount()} />\r\n                    </Col>\r\n                </Row>\r\n                <hr />\r\n                <Row>\r\n                    <Col md='12'>\r\n                        {customerReducer.list && customerReducer.list.map((customer) =>\r\n                            <div key={customer.id}>\r\n                                <Card>\r\n                                    <Card.Header>\r\n                                        {customer.name}\r\n                                    </Card.Header>\r\n                                </Card>\r\n                                <hr />\r\n                            </div>\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n            </Container >\r\n        );\r\n    }\r\n}\r\n\r\nexport function mapStateToProps(state) {\r\n    const { customerReducer } = state.model;\r\n    return { customerReducer };\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        listCustomer: () => dispatch({ type: LIST_CUSTOMER })\r\n    }\r\n}\r\n\r\nconst connectedCustomer = connect(mapStateToProps, mapDispatchToProps);\r\nlet exportCustomer = (connectedCustomer)(Customer);\r\nexportCustomer = withTranslation()(exportCustomer);\r\nexportCustomer = withRouter(exportCustomer);\r\nexport { exportCustomer as Customer };","import React from 'react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n    Row,\r\n    Modal,\r\n    Button,\r\n} from 'react-bootstrap';\r\n\r\nimport { Formik, Form } from 'formik';\r\n\r\nimport {\r\n    appoint,\r\n    CREATE_APPOINT,\r\n    NEW_APPOINT,\r\n    LIST_DOCTOR,\r\n    LIST_CUSTOMER,\r\n} from '@model';\r\nimport { Input, Select } from '@theme';\r\n\r\nclass AppointNew extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            show: false,\r\n        }\r\n    }\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n    async componentDidMount() {\r\n        await this.props.listDoctor();\r\n        await this.props.listCustomer();\r\n    }\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n    handleClose = () => this.setState({ show: false });\r\n    handleShow = () => this.setState({ show: true })\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n    newForm = async () => {\r\n        await this.props.newForm();\r\n        this.handleShow();\r\n    }\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n    onSubmit = async (values) => {\r\n\r\n        values.doctor = {id: values.doctor}\r\n        values.customer = {id: values.customer}\r\n\r\n        await this.props.createAppoint(values);\r\n        this.handleClose();\r\n        this.props.reloadPage();\r\n    }\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n\r\n        const { t } = this.props;\r\n        const { initialValues } = this.props;\r\n        const { doctorReducer, customerReducer } = this.props;\r\n\r\n        return (\r\n            <>\r\n                <Button variant='outline-primary' className='fas fa-plus'\r\n                    onClick={this.newForm}>\r\n                    {t('def_btn_add')}\r\n                </Button>\r\n\r\n                <Modal\r\n                    show={this.state.show}\r\n                    onHide={this.handleClose}\r\n                    backdrop='static'\r\n                    keyboard={false}\r\n                >\r\n                    <Formik\r\n                        initialValues={initialValues}\r\n                        validationSchema={appoint.validation}\r\n                        onSubmit={(values) => this.onSubmit(values)}\r\n                    >\r\n                        {(formik) => (\r\n                            <Form>\r\n\r\n                                <Modal.Header closeButton>\r\n                                    <Modal.Title><i className='fas fa-plus' />{t('def_modal_new')}</Modal.Title>\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n\r\n                                    {formik.values &&\r\n                                        <>\r\n                                            {/* // ///////////////////////////////////////////////////////////// */}\r\n                                            <Row>\r\n                                                <Input {...formik}\r\n                                                    label={t('appoint_date')}\r\n                                                    placeholder={t('appoint_date')}\r\n                                                    name='date'\r\n                                                    type='datetime-local'\r\n                                                />\r\n                                            </Row>\r\n                                            {/* // ///////////////////////////////////////////////////////////// */}\r\n                                            {doctorReducer.list &&\r\n                                                <Row>\r\n                                                    <Select {...formik}\r\n                                                        label={t('doctor_name')}\r\n                                                        placeholder={t('doctor_name')}\r\n                                                        name='doctor'\r\n                                                        list={doctorReducer.list}\r\n                                                    />\r\n                                                </Row>\r\n                                            }\r\n                                            {/* // ///////////////////////////////////////////////////////////// */}\r\n                                            {customerReducer.list &&\r\n                                                <Row>\r\n                                                    <Select {...formik}\r\n                                                        label={t('customer_name')}\r\n                                                        placeholder={t('customer_name')}\r\n                                                        name='customer'\r\n                                                        list={customerReducer.list}\r\n                                                    />\r\n                                                </Row>\r\n                                            }\r\n                                            {/* // ///////////////////////////////////////////////////////////// */}\r\n                                        </>\r\n                                    }\r\n\r\n                                </Modal.Body>\r\n                                <Modal.Footer>\r\n                                    <Button variant='secondary' onClick={this.handleClose}>\r\n                                        {t('def_close')}\r\n                                    </Button>\r\n                                    <Button variant='outline-primary' className='fas fa-check' type='submit' >\r\n                                        {t('def_btn_add')}\r\n                                    </Button>\r\n                                </Modal.Footer>\r\n\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport function mapStateToProps(state) {\r\n    const { appointReducer, doctorReducer, customerReducer } = state.model;\r\n\r\n    return { appointReducer, doctorReducer, customerReducer, initialValues: appointReducer.oid };\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        newForm: () => dispatch({ type: NEW_APPOINT }),\r\n        createAppoint: (data) => dispatch({ type: CREATE_APPOINT, data }),\r\n        listDoctor: () => dispatch({ type: LIST_DOCTOR }),\r\n        listCustomer: () => dispatch({ type: LIST_CUSTOMER }),\r\n    }\r\n}\r\n\r\nconst connectedAppointNew = connect(mapStateToProps, mapDispatchToProps);\r\nlet exportAppointNew = (connectedAppointNew)(AppointNew);\r\nexportAppointNew = withTranslation()(exportAppointNew);\r\nexportAppointNew = withRouter(exportAppointNew);\r\nexport { exportAppointNew as AppointNew };","import React from 'react';\r\nimport { withTranslation } from 'react-i18next';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Card,\r\n} from 'react-bootstrap';\r\n\r\n\r\nimport {\r\n    LIST_APPOINT,\r\n} from '@model';\r\n\r\nimport { AppointNew } from './AppointNew';\r\n\r\nclass Appoint extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n    async componentDidMount() {\r\n        await this.props.listAppoint();\r\n    }\r\n    // /////////////////////////////////////////////////////////////////////////////\r\n\r\n    render() {\r\n\r\n        const { t } = this.props;\r\n        const { appointReducer } = this.props;\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col md='12'><h1>{t('appoint_page_title')}</h1></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md='1'>\r\n                        <AppointNew reloadPage={() => this.componentDidMount()} />\r\n                    </Col>\r\n                </Row>\r\n                <hr />\r\n                <Row>\r\n                    <Col md='12'>\r\n                        {appointReducer.list && appointReducer.list.map((appoint) =>\r\n                            <div key={appoint.id}>\r\n                                <Card>\r\n                                    <Card.Header>\r\n                                        {appoint.dateConverted.complete}\r\n                                    </Card.Header>\r\n                                    <Card.Body>\r\n                                        <pre>{appoint.doctor.name + ' - ' + appoint.doctor.speciality}</pre>\r\n                                        <pre>{t('customer_name')}: {appoint.customer.name}</pre>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                                <hr />\r\n                            </div>\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n            </Container >\r\n        );\r\n    }\r\n}\r\n\r\nexport function mapStateToProps(state) {\r\n    const { appointReducer } = state.model;\r\n    return { appointReducer };\r\n};\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        listAppoint: () => dispatch({ type: LIST_APPOINT })\r\n    }\r\n}\r\n\r\nconst connectedAppoint = connect(mapStateToProps, mapDispatchToProps);\r\nlet exportAppoint = (connectedAppoint)(Appoint);\r\nexportAppoint = withTranslation()(exportAppoint);\r\nexportAppoint = withRouter(exportAppoint);\r\nexport { exportAppoint as Appoint };","import React from 'react';\nimport { Router, Switch, Redirect, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { ToastContainer } from 'react-toastify';\n\nimport { Theme } from '@theme';\nimport { history } from '@theme';\nimport { PrivateRoute } from '@theme';\n\nimport { Login } from './pages';\nimport { Appoint } from './pages';\nimport { Doctor } from './pages';\nimport { Customer } from './pages';\n\nimport './App.css';\nimport './styles/theme.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport '@fortawesome/fontawesome-free/css/brands.css';\nimport '@fortawesome/fontawesome-free/css/regular.css';\nimport '@fortawesome/fontawesome-free/css/solid.css';\nimport '@fortawesome/fontawesome-free/css/fontawesome.css';\n\nclass App extends React.Component {\n\n  /////////////////////////////////////////////////////////////////////////////////\n  render() {\n    return (\n      <>\n        <Router history={history}>\n\n          <Switch>\n            <Theme>\n              <ToastContainer />\n              <Route exact path='/login' component={Login} />\n              <PrivateRoute exact path='/' component={Appoint} />\n              <PrivateRoute path='/doctor' component={Doctor} />\n              <PrivateRoute path='/customer' component={Customer} />\n              <Redirect from='*' to='/' />\n            </Theme>\n          </Switch>\n\n        </Router>\n      </>\n    );\n  }\n  /////////////////////////////////////////////////////////////////////////////////\n}\n\nfunction mapStateToProps(state) {\n  const { alert } = state;\n  return { alert };\n}\n\nexport const mapDispatchToProps = {}\n\nconst connectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport { connectedApp as App };","import { createStore, applyMiddleware, compose, combineReducers } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { createLogger } from 'redux-logger';\r\n\r\nimport rootSaga, { rootReducer } from '@model';\r\n\r\n\r\nconst loggerMiddleware = createLogger();\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\n\r\nexport default function configureStore() {\r\n    //\r\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n    const enhancer = composeEnhancers(\r\n        applyMiddleware(\r\n            loggerMiddleware,\r\n            sagaMiddleware\r\n        ));\r\n\r\n\r\n    const store = createStore(\r\n        combineReducers({\r\n            model: combineReducers({\r\n                ...rootReducer,\r\n            })\r\n        }),\r\n        enhancer\r\n    );\r\n\r\n    sagaMiddleware.run(rootSaga);\r\n\r\n    return store;\r\n\r\n}","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { App } from './App';\n\nimport { I18nextProvider } from \"react-i18next\";\nimport i18n from \"./i18n\";\n\nimport configureStore from './store/store';\nconst store = configureStore();\n\nrender(\n    <Provider store={store}>\n        <I18nextProvider i18n={i18n}>\n            <App />\n        </I18nextProvider>\n    </Provider>,\n    document.getElementById('app')\n);"],"sourceRoot":""}